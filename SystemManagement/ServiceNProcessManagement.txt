Service and Process Management:
-------------------------------
In general, there are two types of services: internal, the relevant services that are required at system startup, which for example, perform hardware-related tasks, and services that are installed by the user, which usually include all server services.
Such services run in the background w/o any user interaction. These are also called 'daemons' and are identified by the letter 'd' at the end of the program name, 
for example, sshd and systemd. 

Most Linux distros have now sitched to systemd. This 'daemon' is an Init process started first and thus ahas the process ID (PID)1. 
This daemon monitors and takes care of the orderly starting and stopping of other services. 
All processes have an assigned PID that can be viewed under /proc/ with the corresponding number. Such a process can have a praent process ID (PPID), and if so, it is known as the child process. 

Beside systemctl we can also use update-rc.d to manage SysV init script links. Lets us have a look at some examples. We will use the 
OpenSSH sever in these examples. If we do not have this installed, please install it before proceeding to this section. 

After installing OpenSSH on our VM, we can start the service with the following command. 

    systemctl start ssh

After we have started the service, we can now check if it runs without errors. 

    systemctl status ssh 
        =>
            ssh.sevice - OpenBSD Secure Shell server 
            Loaded: loaded (/lib/systemd/system.ssh.service; enabled; vendor preset: enabled)
            Active: active (running) since thus
            Main PID: 846 (sshd)
            Tasks: 1(limit: 4681)
            <SNIP>

To add OpenSSH to the SysV script to tell the system to run this service after startup, we can link it iwth the following command:

    systemctl enable ssh
            ==>
                Synchronizing state of ssh.service script with /lib/systemd/systemd-sysv-install.
                Executing: /lib/systemd/systemd-sysv-install enable ssh

Once we reboot the sytem, the Open SSH server will automatically run. We can check this with a tool called 'ps':

    ps -aux | grep ssh
            ==> root  846 0.0 0.1 72300 5660 ?   Ss Mai14 0:00 /usr/sbin/sshd -D 

We can also use systemctl to list all services:

    systemctl list-units --type=service

It's quite possible that the services do not start due to an error. To see the problem, we can use the tool 'journalctl' to view the logs:

    journalctl -u ssh.service --no-pager


KILL A PROCESS:
--------------
A process can be in the following states:
    - Running
    - Waiting (waiting for an event or system resource)
    - Stopped 
    - Zombie (stopped but still has an entry in the process table)

Processes can be controlled using kill, pkill, pgrep, and killall. To interat with processes,we must send a signal to it. 
We can view all signals with the following command:

    kill -l 
       ==> 1) SIGHUP     2) SIGINT   3) SIGQUIT .......

The most commonly user are:
Signal          Description
1               SIGHUP - This is sent to a process when the terminal that controls it is closed
2               SIGINT - Sent when a user presses [Ctrl] + C in the controlling terminal to interrupt a process 
3               SIGQUIT - Sent when a user presses [CTRL] + D to quit 
9               SIGKILL - IMmediatly kill a process with no clean-up ops
15              SIGTERM - Program termination
19              SIGSTOP - Stop the program. It cannot be hanled anymore. 
20              SIGTSTP - Sent when a user presses [Ctrl] + Z to request for a service to suspend. The user can handle it afterward. 


For example, if a program were to freeze, we could force it with the following command:
        kill 9 <PID>


